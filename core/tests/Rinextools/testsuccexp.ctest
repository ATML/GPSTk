# Generic test where success is expected and standard output is
# compared to a reference file.
#
# Expected variables (required unless otherwise noted):
# TEST_PROG: the program under test
# SOURCEDIR: the location of the reference file
# TARGETDIR: the directory to store stdout to compare with the reference output
# TESTBASE: the name of the test, used to create output file and find reference
# ARGS: a space-separated argument list (optional)
# SPARG1: a single escaped argument (optional)
# SPARG2: a single escaped argument (optional)
#
# Flags:
# OWNOUTPUT: if unset, stdout will be captured to ${TESTBASE}.out.  If
#    set, it is expected that the application itself will produce
#    ${TESTBASE}.out.
# NODIFF: if set, do not compare the output to a reference file as
#    part of the test.


# Convert ARGS into a cmake list
IF(DEFINED ARGS)
   string(REPLACE " " ";" ARG_LIST ${ARGS})
ENDIF(DEFINED ARGS)

message(STATUS "running ${TEST_PROG} ${ARGS} ${SPARG1} ${SPARG2}")

IF(NOT DEFINED OWNOUTPUT)
   execute_process(COMMAND ${TEST_PROG} ${ARG_LIST} ${SPARG1} ${SPARG2}
                   OUTPUT_FILE ${TARGETDIR}/${TESTBASE}.out
                   RESULT_VARIABLE HAD_ERROR)
   if(HAD_ERROR)
       message(FATAL_ERROR "Test failed, exit code: ${HAD_ERROR}")
   endif(HAD_ERROR)
ELSE(NOT DEFINED OWNOUTPUT)
   execute_process(COMMAND ${TEST_PROG} ${ARG_LIST} ${SPARG1} ${SPARG2}
                   OUTPUT_QUIET
                   RESULT_VARIABLE HAD_ERROR)
   if(HAD_ERROR)
       message(FATAL_ERROR "Test failed, exit code: ${HAD_ERROR}")
   endif(HAD_ERROR)
ENDIF(NOT DEFINED OWNOUTPUT)

IF(NOT DEFINED NODIFF)
  execute_process(COMMAND ${DIFF_PROG}
      -1 ${GPSTK_TEST_DATA_DIR}/${TESTBASE}.exp
      -2 ${GPSTK_TEST_OUTPUT_DIR}/${TESTBASE}.out
      RESULT_VARIABLE RC)

   IF(NOT RC EQUAL 0)
       message(FATAL_ERROR "Test failed - files differ")
   endif(NOT RC EQUAL 0)
ENDIF(NOT DEFINED NODIFF)
